<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context 
     http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/jdbc 
     http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
     http://www.springframework.org/schema/tx 
     http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop.xsd">

   	<context:property-placeholder location="/WEB-INF/config/jdbc.properties" />
	
	<!-- 配置DataSource数据源 支持oracel与mybatis -->
	<!-- BasicDataSource提供了close()方法关闭数据源，所以必须设定destroy-method=”close”属性， 以便Spring容器关闭时，数据源能够正常关闭. -->
	<bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 设置从数据源中返回的连接是否采用自动提交机制 -->
		<property name="defaultAutoCommit" value="true"></property>
		<!-- 设置数据源是否仅能执行只读操作 -->
		<property name="defaultReadOnly" value="false"></property>
		<!-- 链接池初始化大小 -->
		<property name="initialSize" value="${jdbc.initialSize}"></property>
		<!-- 最大等待连接中的数量，设置为0时，表示没有限制 -->
		<property name="maxIdle" value="${jdbc.maxIdle}"></property>
		<!-- 最大连接数据库连接数，设置为0时，表示没有限制 -->
		<property name="maxActive" value="${jdbc.maxActive}"></property>
		<!-- 是否在自动回收超时连接的时候打印连接的超时错误 -->
		<property name="logAbandoned" value="${jdbc.logAbandoned}"></property>
		<!-- 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}"></property>
		<!-- 自动回收超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"></property>
		<!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒  -->
		<property name="maxWait" value="${jdbc.maxWait}"></property>
	</bean>

	<!-- Spring提供的myBatis的SqlMap配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="myDataSource" />
		<property name="configLocation" value="/WEB-INF/config/mybatis/mybatis-config.xml" />
	</bean>

	<!-- 注册Mapper方式二：也可不指定特定mapper，而使用自动扫描包的方式来注册各种Mapper类，配置如下：-->
	<!-- 此处的value不支持通配符.* -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		 <property name="basePackage" value="com.framework.test.mapper"/>
	</bean>
	
	<!-- 配置事物 -->
    <bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="myDataSource" />
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	
	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- REQUIRED 如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中 -->
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="append*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair*" propagation="REQUIRED" />
			<tx:method name="delAndRepair*" propagation="REQUIRED" />

			<!-- SUPPORTS 支持当前事务，如果当前没有事务，就以非事务方式执行 -->
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />
			<tx:method name="query*" propagation="SUPPORTS" />

			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.framework..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>
	
</beans>
